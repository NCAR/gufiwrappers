#!/usr/bin/env python

import os
import argparse
import numpy as np
import builddb as bdb
import dsplyfunc as dpy
from multiprocessing import Pool
from datetime import datetime
import time

bdb.MAXHBINS = 1024  # Maximum histogram bins
# size,uid,mtime,atime,xattrs,name,path() for HPSS mtime is replaced by ctime
prefixdir = '/'
bdb.prefixdir = '/search/hpss/CCSM/paleo'
basedir = ""
basedirlen = 2**31


defcachepref = os.path.join('/gpfs/fs1/scratch', os.environ['LOGNAME'], 'gufi_cache')

parser = argparse.ArgumentParser(description='Cache tree DB for finegrain queries')
parser.add_argument('-cd', '--cache-dir', dest='cd', default=defcachepref)
parser.add_argument('-n', '--ncores', dest='ncores', default=1, help='Number of cores / threads to run')
parser.add_argument('--nsbins', dest='nsbins', default=8, help='Number of write / read stat bins')
parser.add_argument('-d', '--tree', dest='tree', help='Directory against which to launch the query')
parser.add_argument('--passwdfile', dest='passwdfile', help='passwd file')
parser.add_argument('--projmapfile', dest='projmapfile', help='projmap file')
parser.add_argument(dest='cache_files', nargs='+',  help='All cache files generated by gext_cache')
args = parser.parse_args()

prefixdir = args.tree
cachedir = args.cd
cfiles = args.cache_files
ncores = int(args.ncores)
nsbins = int(args.nsbins)
passwdfile = args.passwdfile
projmapfile = args.projmapfile

#res, total = bdb.getDataByFields(ncores, bdb.dataByUids, cfiles )
#dpy.displayDataByKey( res, total, nsbins, "Uname/Uids" )

#res, total = bdb.getDataByFields(ncores, bdb.dataByProjs, cfiles )
#dpy.displayDataByKey( res, total, nsbins, "Projs" )

res, total = bdb.getDataByFields(ncores, bdb.dataBySubDirs, cfiles )
dpy.displayDataByKey( res, total, nsbins, "Subdirs" )
